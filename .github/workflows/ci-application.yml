name: Application CI

on:
  push:
    branches:
      - 'integration'

permissions:
  contents: write  # Grants permission to push changes to the repository

jobs:
  build-and-test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' 

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-

      - name: Install dependencies
        run: |
          cd frontend
          npm install

      - name: Lint code
        run: |
          cd frontend
          npm run lint | tee /dev/null

      - name: Build
        run: |
          cd frontend
          npm run build

  build-and-test-backend:
    runs-on: ubuntu-latest
    needs: 
      - build-and-test-frontend
    services:
      db:
        image: postgres:13
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: changethis123
          POSTGRES_DB: app
          POSTGRES_HOST: localhost
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd backend
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install
          
      # - name: Copy env file
      #   run: |
      #     cd backend
      #     cp .env.sample .env

      # - name: Run app
      #   run: |
      #     cd backend
      #     poetry run bash ./prestart.sh
      #     poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &

      - name: Run tests
        run: |
          cd backend
          poetry run pytest | tee /dev/null

  build-and-push:
    runs-on: ubuntu-latest
    needs: 
      - build-and-test-backend
    steps:
      - uses: actions/checkout@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and Push Frontend
        working-directory: ./frontend
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/challenge-frontend:${{ github.sha }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/challenge-frontend:${{ github.sha }}
      
      - name: Build and Push Backend
        working-directory: ./backend
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/challenge-backend:${{ github.sha }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/challenge-backend:${{ github.sha }}
      
  uppdate-compose:
    runs-on: ubuntu-latest
    needs: 
      - build-and-push
    steps:
      - uses: actions/checkout@v3  

      - name: Update docker-compose
        run: |
          # Ensure correct image tags are updated
          sed -i 's|${{ secrets.DOCKERHUB_USERNAME }}/challenge-backend:latest|${{ secrets.DOCKERHUB_USERNAME }}/challenge-backend:${{ github.sha }}|g' docker-compose.yaml
          sed -i 's|${{ secrets.DOCKERHUB_USERNAME }}/challenge-frontend:latest|${{ secrets.DOCKERHUB_USERNAME }}/challenge-frontend:${{ github.sha }}|g' docker-compose.yaml
          
          # Check if changes were made
          if [[ -n $(git status -s) ]]; then
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add docker-compose.yaml
            git commit -m "Update image tags to ${{ github.sha }}"
            git push
          else
            echo "No changes"
          fi